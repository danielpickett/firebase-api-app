{"version":3,"sources":["Note.js","AddNote.js","App.js","index.js"],"names":["Note","state","editContent","_this","props","noteContent","onChange","e","setState","target","value","onSaveNote","preventDefault","saveNote","id","history","push","onDeleteNote","deleteNote","animate","setTimeout","document","querySelector","classList","add","console","log","_this2","this","react_default","a","createElement","Fragment","Route","exact","path","render","className","Link","to","concat","_ref","Object","esm_extends","match","params","onSubmit","type","_ref2","onClick","Component","withRouter","AddNote","handleSubmit","addNote","elements","note","reset","name","placeholder","required","App","notes","handleAddNote","newContent","timeStamp","Date","now","newNote","content","fetch","method","body","JSON","stringify","then","res","json","noteName","prevState","attrs","toConsumableArray","handleSaveNote","headers","Content-Type","map","handleDeleteNote","filter","notesArr","entries","slicedToArray","sort","b","parseInt","_this3","BrowserRouter","src_AddNote","src_Note","key","ReactDOM","src_App","getElementById"],"mappings":"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","file":"static/js/main.aa24d821.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route, Link, withRouter } from 'react-router-dom';\r\n\r\nclass Note extends Component {\r\n\r\n  // Maintain a local state of editContent to hold the content of any note currently being edited.\r\n  state = {\r\n    editContent: this.props.noteContent\r\n  }\r\n  \r\n  // Keep editContent synchronized with the content of the form input for any note currently being edited.\r\n  onChange = (e) => {\r\n    this.setState({\r\n      editContent: e.target.value\r\n    })\r\n  }\r\n\r\n  // Save edited note by calling saveNote() with the id and editContent of the current note and then change the Route back to home\r\n  onSaveNote = (e) => {\r\n    e.preventDefault();\r\n    this.props.saveNote(this.props.id, this.state.editContent)\r\n    this.props.history.push('/')\r\n  }\r\n\r\n  // Delete note by calling deleteNote() with the id of the current note and then change the Route back to home\r\n  onDeleteNote = () => {\r\n    this.props.deleteNote(this.props.id);\r\n    this.props.history.push('/')\r\n  }\r\n\r\n\r\n  // Wait a bit, then add an 'animate' class to the container div of the current note.\r\n  // I know this is a bit hacky, but this is the only way I could figure out to get CSS animations working between Routes,\r\n  // without adding complexity through additional dependencies.\r\n  animate = () => {\r\n    const id = this.props.id;\r\n    setTimeout(function(){\r\n      // future improvement: add try catch\r\n      try {\r\n        document.querySelector(\"#\" + id + \".note\").classList.add('animate');\r\n      } catch(e) {\r\n        console.log(e);\r\n      }\r\n      \r\n    }, 0);\r\n  }\r\n\r\n\r\n  render() {\r\n    this.animate();\r\n    return (\r\n      <>\r\n        {/* The Home Route */}\r\n        <Route exact path=\"/\" render={ () => \r\n          <>\r\n            <div id={this.props.id} className=\"note\">\r\n              <div className=\"container\">\r\n                <div className=\"content\">{this.props.noteContent}</div>\r\n                <div className=\"button-group\">\r\n                  <Link to={`${this.props.id}/edit`}>edit</Link>\r\n                  <Link to={`${this.props.id}/delete`}>delete</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        } />\r\n        {/* The Edit Route for this specific Note */}\r\n        <Route path=\"/:id/edit\" render={ ({...props}) => {\r\n          return (\r\n            <div id={this.props.id} className={`note ${props.match.params.id === this.props.id ? \"editing\" : \"disabled\"}`}>\r\n              <div className=\"container\">\r\n                {props.match.params.id === this.props.id // Is this note the one being edited, as identified in the path?\r\n                ? // If so, generate a form and corresponding inputs\r\n                <>\r\n                  <form className=\"content-form\" onSubmit={this.onSaveNote}>\r\n                    <input className=\"content\" type=\"text\" value={this.state.editContent} onChange={this.onChange} />\r\n                    <div className=\"button-group\">\r\n                      <span className=\"micro-copy\">editing:</span>\r\n                      <input type=\"submit\" value=\"save\" />\r\n                      <Link to=\"/\">cancel</Link>\r\n                    </div>                    \r\n                  </form>\r\n                </>\r\n                : // If not, just show the content, and don't add any buttons to the button-group\r\n                <>\r\n                  <div className=\"content\">{this.props.noteContent}</div>\r\n                  <div className=\"button-group\"></div>\r\n                </>\r\n                }\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n\r\n        } />\r\n        {/* The Delete Route for this specific Note */}\r\n        <Route path=\"/:id/delete\" render={ ({...props}) => \r\n          <div id={this.props.id} className={`note ${props.match.params.id === this.props.id ? \"deleting\" : \"disabled\"}`}>\r\n            <div className=\"container\">\r\n              <div className=\"content\">{this.props.noteContent}</div> {/* Show the normal note content for all notes when the Route is '/delete'  */}\r\n              {props.match.params.id === this.props.id // Is this note the one being deleted, as identified in the path?\r\n              ? // If so, fill the button-group buttons for a delete confirmation\r\n              <div className=\"button-group\">\r\n                <span className=\"micro-copy\">delete?</span>\r\n                <button onClick={this.onDeleteNote}>yes</button>\r\n                <Link to=\"/\">no</Link>\r\n              </div>\r\n              : // If not, just show an empty button group\r\n              <div className=\"button-group\"></div>\r\n              }\r\n            </div>\r\n          </div>\r\n        } />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Note); // Using withRouter() here allowed me to use this.props.history.push('/') in onDeleteNote() and onSaveNote() above","import React, {Component} from 'react';\r\n\r\nclass AddNote extends Component {\r\n\r\n  // Handle submission of the entire form element, so the browser can handle input value and enter-key-to-submit behavior\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addNote(e.target.elements.note.value); // Form element manages \"state\" ...\r\n    e.target.reset(); // and manages the form reset\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"new-note-wrapper\">\r\n      <form className=\"new-note-form\" onSubmit={this.handleSubmit}>\r\n        <input type=\"text\" name=\"note\" placeholder=\"Type a new note\" required />\r\n        <input type=\"submit\" value=\"save note\"/>\r\n      </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddNote;","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport './style.css';\r\n\r\nimport Note from './Note';\r\nimport AddNote from './AddNote';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    notes: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Retrieve existing notes\r\n    fetch('https://my-firebase-api-app.firebaseio.com/notes.json')\r\n    .then(res => res.json())\r\n    .then(notes => {\r\n      if (notes) {\r\n        // Firebase does not return an array, it returns an object filled with objects\r\n        const notesArr = Object.entries(notes).map(([id, attrs]) => ({ // Use Object.entries to convert to an array\r\n          id,\r\n          attrs\r\n        })).sort(function(a, b){  // Sort the notes by their timeStamp (the time it was created) in reverse to put newest notes on top\r\n          return parseInt(b.attrs.timeStamp) - parseInt(a.attrs.timeStamp);\r\n        });\r\n        this.setState({ notes: notesArr })  // Set state to this new sorted array\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  // Add a new note\r\n  handleAddNote = (newContent) => {\r\n    const timeStamp = Date.now();  // Time stamp of when this note was created\r\n    const newNote = {\r\n      timeStamp: timeStamp,\r\n      content: newContent\r\n    }\r\n    fetch('https://my-firebase-api-app.firebaseio.com/notes.json', {  // POST to Firebase\r\n      method: \"POST\",\r\n      body: JSON.stringify(newNote)\r\n    })\r\n    .then(res => res.json())\r\n    .then(noteName => {\r\n      this.setState((prevState) => { // Add new note to state\r\n        return {\r\n          notes: [ // The new note\r\n            {\r\n              id: noteName.name,\r\n              attrs: {\r\n                timeStamp: timeStamp, \r\n                content: newContent\r\n              }\r\n            },\r\n            ...prevState.notes, // Older notes go on the bottom\r\n          ]\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // Save an edited note\r\n  handleSaveNote = (id, noteContent) => {\r\n    // update note in Firebase using PATCH\r\n    fetch(\"https://my-firebase-api-app.firebaseio.com/notes/\" + id + \"/.json\", {\r\n      body: \"{\\\"content\\\": \\\"\" + noteContent + \"\\\"}\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n      },\r\n      method: \"PATCH\"\r\n    })\r\n    .then(res => res.json())\r\n    .then(() => {\r\n      this.setState(prevState => ({notes: prevState.notes.map((note) => ({\r\n        id: note.id,\r\n        attrs: {\r\n          timeStamp: note.attrs.timeStamp,\r\n          content: note.id === id ? noteContent : note.attrs.content  // Ternary operator: if the note id of the current map object matches the id of the note that was edited, use the new content.\r\n        }\r\n      }))})\r\n      );\r\n    });\r\n  }\r\n\r\n  // Delete a note\r\n  handleDeleteNote = (id) => {\r\n    // Delete note frm o\r\n    fetch('https://my-firebase-api-app.firebaseio.com/notes/' + id + '.json', {\r\n      method: 'DELETE'\r\n    })\r\n    .then(res => res.json())\r\n    .then(() => {\r\n      this.setState(prevState => {\r\n        const newNotes = prevState.notes.filter(note => (\r\n          note.id !== id  // Return only notes that don't match the id of the note to be deleted\r\n        ));\r\n        return { notes: newNotes }\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n      <div className=\"app\">\r\n        <AddNote addNote={this.handleAddNote}/>\r\n        {this.state.notes.map( note => (\r\n          <Note\r\n            noteContent={note.attrs.content}\r\n            key={note.id}\r\n            id={note.id}\r\n            saveNote={this.handleSaveNote}\r\n            deleteNote={this.handleDeleteNote}\r\n          />\r\n        ))}\r\n      </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}